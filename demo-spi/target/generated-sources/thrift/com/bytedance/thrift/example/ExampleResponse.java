/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bytedance.thrift.example;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2024-03-21")
public class ExampleResponse implements org.apache.thrift.TBase<ExampleResponse, ExampleResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ExampleResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExampleResponse");

  private static final org.apache.thrift.protocol.TField RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("Resp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("BaseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExampleResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExampleResponseTupleSchemeFactory());
  }

  public String Resp; // required
  public com.bytedance.thrift.BaseResp BaseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESP((short)1, "Resp"),
    BASE_RESP((short)255, "BaseResp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESP
          return RESP;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESP, new org.apache.thrift.meta_data.FieldMetaData("Resp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("BaseResp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bytedance.thrift.BaseResp.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExampleResponse.class, metaDataMap);
  }

  public ExampleResponse() {
  }

  public ExampleResponse(
    String Resp,
    com.bytedance.thrift.BaseResp BaseResp)
  {
    this();
    this.Resp = Resp;
    this.BaseResp = BaseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExampleResponse(ExampleResponse other) {
    if (other.isSetResp()) {
      this.Resp = other.Resp;
    }
    if (other.isSetBaseResp()) {
      this.BaseResp = new com.bytedance.thrift.BaseResp(other.BaseResp);
    }
  }

  public ExampleResponse deepCopy() {
    return new ExampleResponse(this);
  }

  @Override
  public void clear() {
    this.Resp = null;
    this.BaseResp = null;
  }

  public String getResp() {
    return this.Resp;
  }

  public ExampleResponse setResp(String Resp) {
    this.Resp = Resp;
    return this;
  }

  public void unsetResp() {
    this.Resp = null;
  }

  /** Returns true if field Resp is set (has been assigned a value) and false otherwise */
  public boolean isSetResp() {
    return this.Resp != null;
  }

  public void setRespIsSet(boolean value) {
    if (!value) {
      this.Resp = null;
    }
  }

  public com.bytedance.thrift.BaseResp getBaseResp() {
    return this.BaseResp;
  }

  public ExampleResponse setBaseResp(com.bytedance.thrift.BaseResp BaseResp) {
    this.BaseResp = BaseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.BaseResp = null;
  }

  /** Returns true if field BaseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.BaseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.BaseResp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESP:
      if (value == null) {
        unsetResp();
      } else {
        setResp((String)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((com.bytedance.thrift.BaseResp)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESP:
      return getResp();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESP:
      return isSetResp();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExampleResponse)
      return this.equals((ExampleResponse)that);
    return false;
  }

  public boolean equals(ExampleResponse that) {
    if (that == null)
      return false;

    boolean this_present_Resp = true && this.isSetResp();
    boolean that_present_Resp = true && that.isSetResp();
    if (this_present_Resp || that_present_Resp) {
      if (!(this_present_Resp && that_present_Resp))
        return false;
      if (!this.Resp.equals(that.Resp))
        return false;
    }

    boolean this_present_BaseResp = true && this.isSetBaseResp();
    boolean that_present_BaseResp = true && that.isSetBaseResp();
    if (this_present_BaseResp || that_present_BaseResp) {
      if (!(this_present_BaseResp && that_present_BaseResp))
        return false;
      if (!this.BaseResp.equals(that.BaseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Resp = true && (isSetResp());
    list.add(present_Resp);
    if (present_Resp)
      list.add(Resp);

    boolean present_BaseResp = true && (isSetBaseResp());
    list.add(present_BaseResp);
    if (present_BaseResp)
      list.add(BaseResp);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExampleResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResp()).compareTo(other.isSetResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Resp, other.Resp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseResp()).compareTo(other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BaseResp, other.BaseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExampleResponse(");
    boolean first = true;

    sb.append("Resp:");
    if (this.Resp == null) {
      sb.append("null");
    } else {
      sb.append(this.Resp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BaseResp:");
    if (this.BaseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.BaseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (BaseResp != null) {
      BaseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExampleResponseStandardSchemeFactory implements SchemeFactory {
    public ExampleResponseStandardScheme getScheme() {
      return new ExampleResponseStandardScheme();
    }
  }

  private static class ExampleResponseStandardScheme extends StandardScheme<ExampleResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExampleResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Resp = iprot.readString();
              struct.setRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.BaseResp = new com.bytedance.thrift.BaseResp();
              struct.BaseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExampleResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Resp != null) {
        oprot.writeFieldBegin(RESP_FIELD_DESC);
        oprot.writeString(struct.Resp);
        oprot.writeFieldEnd();
      }
      if (struct.BaseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.BaseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExampleResponseTupleSchemeFactory implements SchemeFactory {
    public ExampleResponseTupleScheme getScheme() {
      return new ExampleResponseTupleScheme();
    }
  }

  private static class ExampleResponseTupleScheme extends TupleScheme<ExampleResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExampleResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetResp()) {
        optionals.set(0);
      }
      if (struct.isSetBaseResp()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetResp()) {
        oprot.writeString(struct.Resp);
      }
      if (struct.isSetBaseResp()) {
        struct.BaseResp.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExampleResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.Resp = iprot.readString();
        struct.setRespIsSet(true);
      }
      if (incoming.get(1)) {
        struct.BaseResp = new com.bytedance.thrift.BaseResp();
        struct.BaseResp.read(iprot);
        struct.setBaseRespIsSet(true);
      }
    }
  }

}

